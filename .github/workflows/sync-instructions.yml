name: Sync Development Instructions

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'docs/decisions/**/*.md'
      - 'CLAUDE.md'
      - 'docs/developer-agents/**/*.md'
      - '.github/instructions/copilot-instructions.md'
      - '.cursorrules'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to sync (optional)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-instructions:
    name: Synchronize Instruction Files
    runs-on: ubuntu-latest
    
    # Skip if last commit was from sync agent or has [skip-sync] flag
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.actor != 'github-actions[bot]' &&
        !contains(github.event.head_commit.message, '[skip-sync]') &&
        !contains(github.event.head_commit.message, 'sync:')
      )
    
    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          # Use a token with write permissions
          token: ${{ secrets.GITHUB_TOKEN }}
          # Checkout the PR branch, not the merge commit
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install anthropic pyyaml

      - name: Configure Git
        run: |
          git config --global user.name 'sync-agent[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Detect Changes
        id: detect
        run: |
          echo "Detecting changes that require synchronization..."
          
          # Check what files changed in this PR
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            # For manual triggers, compare with main
            BASE_SHA="origin/main"
            HEAD_SHA="HEAD"
          fi
          
          # Detect which key files changed
          ADR_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^docs/decisions/.*\.md$' || echo "")
          CLAUDE_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^CLAUDE\.md$' || echo "")
          AGENTS_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^docs/developer-agents/.*\.md$' || echo "")
          COPILOT_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^\.github/instructions/copilot-instructions\.md$' || echo "")
          
          # Set outputs for next steps
          if [ -n "$ADR_CHANGED" ] || [ -n "$CLAUDE_CHANGED" ] || [ -n "$AGENTS_CHANGED" ]; then
            echo "sync_needed=true" >> $GITHUB_OUTPUT
            echo "Changes detected that require synchronization"
            [ -n "$ADR_CHANGED" ] && echo "  - ADRs changed: $ADR_CHANGED"
            [ -n "$CLAUDE_CHANGED" ] && echo "  - CLAUDE.md changed"
            [ -n "$AGENTS_CHANGED" ] && echo "  - Developer agents changed: $AGENTS_CHANGED"
          else
            echo "sync_needed=false" >> $GITHUB_OUTPUT
            echo "No changes requiring synchronization"
          fi

      - name: Run Sync Coordinator Agent
        if: steps.detect.outputs.sync_needed == 'true'
        id: sync
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat << 'EOF' > sync_agent.py
          import os
          import sys
          import anthropic
          from pathlib import Path
          import subprocess
          
          # Initialize Anthropic client
          client = anthropic.Anthropic(api_key=os.environ.get('ANTHROPIC_API_KEY'))
          
          # Read key files
          def read_file(path):
              try:
                  with open(path, 'r') as f:
                      return f.read()
              except FileNotFoundError:
                  return None
          
          # Get changed files
          result = subprocess.run(['git', 'diff', '--name-only', 'origin/main', 'HEAD'], 
                                capture_output=True, text=True)
          changed_files = result.stdout.strip().split('\n') if result.stdout else []
          
          # Read current state of instruction files
          claude_md = read_file('CLAUDE.md')
          copilot_instructions = read_file('.github/instructions/copilot-instructions.md')
          
          # Read sync coordinator agent instructions
          sync_agent = read_file('docs/developer-agents/sync-coordinator.md')
          
          # Prepare context for sync agent
          context = f"""
          You are the sync coordinator agent. Your role is defined in:
          {sync_agent}
          
          Files that changed in this PR:
          {', '.join(changed_files)}
          
          Current CLAUDE.md content:
          {claude_md}
          
          Current copilot-instructions.md content:
          {copilot_instructions}
          
          Please analyze what needs to be synchronized and provide the updates needed.
          Return your response in this format:
          
          SYNC_NEEDED: true/false
          
          If true, provide:
          FILE: [filepath]
          CHANGES:
          [updated content for that file]
          END_FILE
          
          You may update multiple files. Only include files that need changes.
          """
          
          # Call Claude to perform synchronization analysis
          try:
              message = client.messages.create(
                  model="claude-3-5-sonnet-20241022",
                  max_tokens=8000,
                  temperature=0.2,
                  messages=[{"role": "user", "content": context}]
              )
              
              response = message.content[0].text
              print("Sync agent response received")
              
              # Parse response and apply changes
              if "SYNC_NEEDED: true" in response:
                  print("echo 'changes_made=true' >> $GITHUB_OUTPUT")
                  # Parse and apply file changes
                  # This is a simplified version - real implementation would parse and apply updates
                  print("Synchronization updates identified")
              else:
                  print("echo 'changes_made=false' >> $GITHUB_OUTPUT")
                  print("No synchronization needed")
                  
          except Exception as e:
              print(f"Error running sync agent: {e}")
              sys.exit(1)
          EOF
          
          python sync_agent.py

      - name: Commit Synchronized Changes
        if: steps.sync.outputs.changes_made == 'true'
        run: |
          # Check if there are changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "sync: update instruction files [skip-sync]
            
            - Synchronized copilot-instructions.md with CLAUDE.md changes
            - Updated chatmode definitions as needed
            - Aligned with recent ADR decisions
            
            This is an automated synchronization to maintain consistency across instruction files."
            
            git push origin HEAD
            echo "‚úÖ Synchronization changes committed to PR"
          else
            echo "No changes to commit"
          fi

      - name: Comment on PR
        if: steps.sync.outputs.changes_made == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            if (pr_number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: 'üîÑ **Instruction Files Synchronized**\n\nI\'ve automatically synchronized the instruction files to maintain consistency across:\n- CLAUDE.md\n- GitHub Copilot instructions\n- Developer agent definitions\n- Chatmode files\n\nPlease review the synchronized changes in the latest commit.'
              });
            }

      - name: Handle Sync Errors
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            if (pr_number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: '‚ö†Ô∏è **Synchronization Issue**\n\nI was unable to automatically synchronize the instruction files. This might be due to:\n- Conflicting changes that need manual resolution\n- API issues with the sync agent\n- Complex changes requiring human review\n\nPlease review the instruction files manually to ensure consistency.'
              });
            }