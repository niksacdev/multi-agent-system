name: Sync Development Instructions

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'docs/decisions/**/*.md'
      - 'CLAUDE.md'
      - 'docs/developer-agents/**/*.md'
      - '.github/instructions/copilot-instructions.md'
      - '.cursorrules'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to sync (optional)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-instructions:
    name: Synchronize Instruction Files
    runs-on: ubuntu-latest
    
    # Skip if last commit was from sync agent or has [skip-sync] flag
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.actor != 'github-actions[bot]' &&
        !contains(github.event.head_commit.message, '[skip-sync]') &&
        !contains(github.event.head_commit.message, 'sync:')
      )
    
    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          # Use a token with write permissions
          token: ${{ secrets.GITHUB_TOKEN }}
          # Checkout the PR branch, not the merge commit
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install pyyaml

      - name: Configure Git
        run: |
          git config --global user.name 'sync-agent[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Detect Changes
        id: detect
        run: |
          echo "Detecting changes that require synchronization..."
          
          # Check what files changed in this PR
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            # For manual triggers, compare with main
            BASE_SHA="origin/main"
            HEAD_SHA="HEAD"
          fi
          
          # Detect which key files changed
          ADR_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^docs/decisions/.*\.md$' || echo "")
          CLAUDE_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^CLAUDE\.md$' || echo "")
          AGENTS_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^docs/developer-agents/.*\.md$' || echo "")
          COPILOT_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^\.github/instructions/copilot-instructions\.md$' || echo "")
          
          # Set outputs for next steps
          if [ -n "$ADR_CHANGED" ] || [ -n "$CLAUDE_CHANGED" ] || [ -n "$AGENTS_CHANGED" ]; then
            echo "sync_needed=true" >> $GITHUB_OUTPUT
            echo "Changes detected that require synchronization"
            [ -n "$ADR_CHANGED" ] && echo "  - ADRs changed: $ADR_CHANGED"
            [ -n "$CLAUDE_CHANGED" ] && echo "  - CLAUDE.md changed"
            [ -n "$AGENTS_CHANGED" ] && echo "  - Developer agents changed: $AGENTS_CHANGED"
          else
            echo "sync_needed=false" >> $GITHUB_OUTPUT
            echo "No changes requiring synchronization"
          fi

      # TODO: Implement provider-agnostic synchronization
      # Options:
      # 1. Use GitHub's built-in AI (if available)
      # 2. Create a rule-based Python script for synchronization
      # 3. Use GitHub Apps with claude-review style integration
      # 
      # For now, we'll just notify that manual sync may be needed
      
      - name: Check Synchronization Status
        if: steps.detect.outputs.sync_needed == 'true'
        run: |
          echo "::warning::Instruction files may need synchronization. Please review:"
          echo "- CLAUDE.md (master reference)"
          echo "- .github/instructions/copilot-instructions.md"
          echo "- docs/developer-agents/*.md"
          echo "- .github/chatmodes/*.chatmode.md"
          
          # Create a simple diff-based check
          python3 << 'EOF'
          import yaml
          import re
          from pathlib import Path
          
          def check_file_references():
              """Check if files use references instead of inline code"""
              issues = []
              
              # Check for inline code blocks (```), which should be minimal
              for file_path in [
                  'CLAUDE.md',
                  '.github/instructions/copilot-instructions.md'
              ]:
                  if Path(file_path).exists():
                      content = Path(file_path).read_text()
                      code_blocks = len(re.findall(r'```', content))
                      if code_blocks > 10:  # Allow some code blocks but not too many
                          issues.append(f"{file_path}: Has {code_blocks//2} code blocks - consider using file references")
              
              # Check for common synchronization issues
              claude_content = Path('CLAUDE.md').read_text() if Path('CLAUDE.md').exists() else ""
              copilot_content = Path('.github/instructions/copilot-instructions.md').read_text() if Path('.github/instructions/copilot-instructions.md').exists() else ""
              
              # Check for version mismatches (example check)
              if 'Python 3.10' in claude_content and 'Python 3.10' not in copilot_content:
                  issues.append("Python version mismatch between CLAUDE.md and copilot-instructions.md")
              
              return issues
          
          issues = check_file_references()
          if issues:
              print("‚ö†Ô∏è Potential synchronization issues found:")
              for issue in issues:
                  print(f"  - {issue}")
          else:
              print("‚úÖ Basic synchronization checks passed")
          EOF

      - name: Comment on PR
        if: steps.detect.outputs.sync_needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.issue.number;
            if (pr_number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: 'üìù **Synchronization Check**\n\nChanges to instruction files detected. Please ensure the following files remain synchronized:\n\n- `CLAUDE.md` - Master reference\n- `.github/instructions/copilot-instructions.md` - GitHub Copilot\n- `.github/chatmodes/*.chatmode.md` - Copilot chatmodes\n- `.cursor/rules/*.mdc` - Cursor IDE rules\n\n**Optimization Reminder**: Follow ADR-004 - use file references instead of inline code to reduce token usage.'
              });
            }

      # Error handling is now simplified since we don't use external APIs
      - name: Handle Sync Errors
        if: failure() && steps.sync.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.issue.number;
            if (pr_number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: '‚ö†Ô∏è **Synchronization Check Failed**\n\nThe automated synchronization check encountered an issue. Please manually verify that instruction files are consistent.'
              });
            }