name: 🔬 Expert Engineer Review Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: string

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  PYTHON_VERSION: "3.10"

jobs:
  automated-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Need full history for proper diff analysis
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: 🔄 Install dependencies
      run: |
        uv sync
        
    - name: 🔍 Analyze code changes
      run: |
        echo "## 🔬 Expert Engineer Review Analysis" >> review_results.md
        echo "" >> review_results.md
        
        # Get the target branch (main or develop)
        if [ "${{ github.event.pull_request.base.ref }}" != "" ]; then
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
        else
          TARGET_BRANCH="main"
        fi
        
        echo "**Target Branch:** $TARGET_BRANCH" >> review_results.md
        echo "**Changes Analysis:**" >> review_results.md
        echo "" >> review_results.md
        
        # Analyze file changes
        echo "### 📁 File Changes" >> review_results.md
        git diff --name-status origin/$TARGET_BRANCH...HEAD | while read status file; do
          case $status in
            A) echo "- ➕ **Added:** \`$file\`" >> review_results.md ;;
            M) echo "- 📝 **Modified:** \`$file\`" >> review_results.md ;;
            D) echo "- ❌ **Deleted:** \`$file\`" >> review_results.md ;;
            R*) echo "- 🔄 **Renamed:** \`$file\`" >> review_results.md ;;
          esac
        done
        echo "" >> review_results.md
        
    - name: 🧪 Run comprehensive test analysis
      run: |
        echo "### 🧪 Test Coverage Analysis" >> review_results.md
        echo "" >> review_results.md
        
        # Run tests and capture results
        if uv run pytest tests/test_agent_registry.py -v --cov=loan_processing.agents.providers.openai.agentregistry --cov=loan_processing.agents.shared --cov-report=term-missing > test_output.txt 2>&1; then
          echo "✅ **Core tests passing:** All 28 agent registry tests pass" >> review_results.md
          
          # Extract coverage info
          if grep -q "TOTAL" test_output.txt; then
            coverage_line=$(grep "TOTAL" test_output.txt | head -1)
            echo "📊 **Coverage:** \`$coverage_line\`" >> review_results.md
          fi
        else
          echo "❌ **Test failures detected** - Review required" >> review_results.md
          echo "" >> review_results.md
          echo "\`\`\`" >> review_results.md
          cat test_output.txt | tail -20 >> review_results.md
          echo "\`\`\`" >> review_results.md
        fi
        echo "" >> review_results.md
        
    - name: 🏗️ Architecture impact analysis
      run: |
        echo "### 🏗️ Architecture Impact Analysis" >> review_results.md
        echo "" >> review_results.md
        
        # Check if this PR affects core architecture
        core_files_changed=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E "(agentregistry\.py|models/|orchestration/)" | wc -l)
        
        if [ $core_files_changed -gt 0 ]; then
          echo "⚠️ **High Impact:** This PR modifies core architecture components" >> review_results.md
          echo "" >> review_results.md
          echo "**Core files affected:**" >> review_results.md
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E "(agentregistry\.py|models/|orchestration/)" | while read file; do
            echo "- \`$file\`" >> review_results.md
          done
          echo "" >> review_results.md
          echo "**⚠️ Expert review required for architectural changes**" >> review_results.md
        else
          echo "✅ **Low Impact:** No core architecture files modified" >> review_results.md
        fi
        echo "" >> review_results.md
        
    - name: 🔒 Security analysis
      run: |
        echo "### 🔒 Security Analysis" >> review_results.md
        echo "" >> review_results.md
        
        # Check for common security issues
        security_issues=0
        
        # Check for hardcoded secrets
        if git diff origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -iE "(api[_-]?key|secret|password|token)" | grep -E "^\+"; then
          echo "⚠️ **Potential hardcoded secrets detected**" >> review_results.md
          security_issues=$((security_issues + 1))
        fi
        
        # Check for unsafe imports
        if git diff origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E "^\+" | grep -E "(eval|exec|subprocess\.call)"; then
          echo "⚠️ **Potentially unsafe code patterns detected**" >> review_results.md
          security_issues=$((security_issues + 1))
        fi
        
        if [ $security_issues -eq 0 ]; then
          echo "✅ **No obvious security issues detected**" >> review_results.md
        else
          echo "" >> review_results.md
          echo "**⚠️ Manual security review recommended**" >> review_results.md
        fi
        echo "" >> review_results.md
        
    - name: 📊 Code quality metrics
      run: |
        echo "### 📊 Code Quality Metrics" >> review_results.md
        echo "" >> review_results.md
        
        # Run linting and capture results
        if uv run ruff check . --output-format=text > lint_output.txt 2>&1; then
          echo "✅ **Linting:** No issues found" >> review_results.md
        else
          issue_count=$(wc -l < lint_output.txt)
          echo "⚠️ **Linting:** $issue_count issues found" >> review_results.md
          echo "" >> review_results.md
          echo "<details><summary>View linting issues</summary>" >> review_results.md
          echo "" >> review_results.md
          echo "\`\`\`" >> review_results.md
          head -50 lint_output.txt >> review_results.md
          echo "\`\`\`" >> review_results.md
          echo "</details>" >> review_results.md
        fi
        
        # Check formatting
        if uv run ruff format --check . > format_output.txt 2>&1; then
          echo "✅ **Formatting:** Code properly formatted" >> review_results.md
        else
          echo "⚠️ **Formatting:** Code formatting issues detected" >> review_results.md
        fi
        echo "" >> review_results.md
        
    - name: 🎯 Review recommendations
      run: |
        echo "### 🎯 Review Recommendations" >> review_results.md
        echo "" >> review_results.md
        
        # Generate recommendations based on analysis
        core_files_changed=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E "(agentregistry\.py|models/|orchestration/)" | wc -l)
        test_files_changed=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E "test_" | wc -l)
        
        if [ $core_files_changed -gt 0 ]; then
          echo "1. **🔬 Expert Architecture Review Required**" >> review_results.md
          echo "   - Core architecture components modified" >> review_results.md
          echo "   - Verify backward compatibility" >> review_results.md
          echo "   - Check for proper abstraction boundaries" >> review_results.md
          echo "" >> review_results.md
        fi
        
        if [ $test_files_changed -gt 0 ]; then
          echo "2. **🧪 Test Strategy Review**" >> review_results.md
          echo "   - Verify test coverage is comprehensive" >> review_results.md
          echo "   - Check for proper test isolation" >> review_results.md
          echo "   - Ensure edge cases are covered" >> review_results.md
          echo "" >> review_results.md
        fi
        
        echo "3. **📋 General Checklist**" >> review_results.md
        echo "   - [ ] All tests pass (✅ automated check)" >> review_results.md
        echo "   - [ ] Coverage ≥90% on core components (✅ automated check)" >> review_results.md
        echo "   - [ ] Code follows established patterns" >> review_results.md
        echo "   - [ ] Documentation updated if needed" >> review_results.md
        echo "   - [ ] Breaking changes documented" >> review_results.md
        echo "" >> review_results.md
        
        echo "---" >> review_results.md
        echo "*🤖 This review was automatically generated. Human expert review may still be required for complex changes.*" >> review_results.md
        
    - name: 📝 Post review comment
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const review = fs.readFileSync('review_results.md', 'utf8');
          
          // Find existing review comment and update it, or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Expert Engineer Review Analysis')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: review
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: review
            });
          }
          
    - name: 🏷️ Auto-label PR based on analysis
      uses: actions/github-script@v7
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const labels = [];
          
          // Architecture changes
          const coreFiles = files.filter(file => 
            file.filename.includes('agentregistry.py') || 
            file.filename.includes('models/') || 
            file.filename.includes('orchestration/')
          );
          if (coreFiles.length > 0) {
            labels.push('architecture-change');
            labels.push('expert-review-required');
          }
          
          // Test changes
          const testFiles = files.filter(file => file.filename.includes('test_'));
          if (testFiles.length > 0) {
            labels.push('tests-modified');
          }
          
          // Documentation changes
          const docFiles = files.filter(file => 
            file.filename.endsWith('.md') || 
            file.filename.includes('docs/')
          );
          if (docFiles.length > 0) {
            labels.push('documentation');
          }
          
          // Large PR
          if (files.length > 10) {
            labels.push('large-pr');
            labels.push('expert-review-required');
          }
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }