# Cursor Development Rules - Multi-Agent System

> **ðŸ“‹ Sync Note**: Derived from CLAUDE.md. Use agent-sync-coordinator before committing instruction changes.

## Project Context
Multi-Agent Loan Processing System using OpenAI Agents SDK with MCP servers. Autonomous agents process loan applications through coordinated workflows.

## Critical Rules (Always Follow)

### Security & Performance
- **ALWAYS** use `applicant_id` (UUID), **NEVER** SSN
- Keep agent personas under 500 lines (75% token reduction)
- Use file references not inline code: `See: loan_processing/agents/agentregistry.py:145-167`
- Detect circular debugging loops, request human intervention

### Package Management
- **ONLY** use `uv`: `uv run`, `uv add`, `uv sync`
- **NEVER** use pip, poetry, conda

### Pre-Commit Validation (MANDATORY)
```bash
# Quick validation - run before EVERY commit
uv run python scripts/validate_ci_fix.py

# Manual checks if needed
uv run ruff check . --fix
uv run ruff format .
uv run pytest tests/test_agent_registry.py -v
```
**Never commit if checks fail. Fix locally first.**

## Architecture Patterns

### Agent Creation
```python
from loan_processing.agents.providers.openai.agentregistry import AgentRegistry
agent = AgentRegistry.create_agent("intake", model="gpt-4")
```

### Configuration-Driven
- Agents: `loan_processing/agents/shared/config/agents.yaml`
- Personas: `loan_processing/agents/shared/agent-persona/*.md`
- Business logic in personas, not orchestrator code

### Repository Structure
```
loan_processing/
â”œâ”€â”€ agents/           # Domain (orchestration, registry)
â”‚   â”œâ”€â”€ providers/openai/
â”‚   â””â”€â”€ shared/
â””â”€â”€ tools/           # Infrastructure (MCP servers)
```

## Development Workflow

### 1. Feature Development
```
Design â†’ Use architecture agents for validation
Code â†’ Follow existing patterns
Test â†’ Run validation script
Sync â†’ If instructions changed, run agent-sync-coordinator
Commit â†’ Small, atomic commits (50-200 lines)
```

### 2. Support Agents (Use Proactively)
- **Architecture Review**: System design validation
- **Code Review**: After writing, before committing
- **Product Manager**: Requirements and issues
- **UX Designer**: UI/UX validation
- **Agent Sync**: When ADRs/CLAUDE.md change

### 3. Commit Best Practices
- Delete branches after PR merge
- Never reuse feature branches
- Commit often (after each logical change)
- Run tests before every commit

## Testing Requirements
- Core tests must pass: `tests/test_agent_registry.py`
- Coverage â‰¥85% on critical modules
- Always use `uv run pytest`, never plain pytest

## Quick Commands
```bash
# Validate everything
uv run python scripts/validate_ci_fix.py

# Run core tests
uv run pytest tests/test_agent_registry.py -v

# Run console app
uv run python scripts/run_console_app.py

# Check agent registry
uv run python -c "from loan_processing.agents.providers.openai.agentregistry import AgentRegistry; print(AgentRegistry.get_agent_types())"
```

## Common Patterns

### Sequential Processing
See: `loan_processing/agents/providers/openai/orchestration/sequential.py`

### Error Handling
See: `loan_processing/agents/providers/openai/orchestration/base.py:187-210`

### Context Management
- Create git checkpoints after major changes
- Provide explicit context for new sessions
- Keep sessions to 2-3 hours, not 8+ marathons

## File References
- Master instructions: `CLAUDE.md`
- Architecture decisions: `docs/decisions/adr-*.md`
- Agent patterns: `docs/agent-patterns.md`
- Security guidelines: `SECURITY.md`

## Synchronization Requirements

**MANDATORY**: Run agent-sync-coordinator when:
- ADRs are added or modified
- CLAUDE.md is updated
- Developer agents change significantly
- Testing standards or workflows change

**Tool Implementations**:
- Claude agents: `.claude/agents/` (if exists)
- GitHub Copilot: `.github/chatmodes/`
- Cursor rules: `.cursor/rules/` or this file

Remember: This is a condensed reference. See CLAUDE.md for comprehensive guidelines.