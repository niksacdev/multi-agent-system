# Cursor AI Rules for Multi-Agent Loan Processing System

<!-- ðŸ“‹ Sync Note: This file syncs with CLAUDE.md (master reference). Update from CLAUDE.md only. See .github/sync-instructions.md -->

## Project Overview
Multi-Agent Loan Processing System using OpenAI Agents SDK with MCP (Model Context Protocol) servers as tools. Autonomous agents process loan applications through coordinated workflows.

## Key Architecture Principles

### Agent Design
- **Autonomous Agents**: Agents decide which MCP tools to use based on assessment needs
- **Persona-Driven**: All agent logic defined in markdown personas, loaded via `load_persona()`
- **No Hardcoded Logic**: Orchestrators only coordinate; business logic lives in personas
- **Clean Separation**: Provider-specific code isolated from domain models

### MCP Server Integration
- **Tool Servers**: Application verification (8010), Document processing (8011), Financial calculations (8012)
- **Agent Selection**: Agents autonomously choose tools based on their persona instructions
- **Secure Parameters**: ALWAYS use `applicant_id` (UUID), NEVER use SSN
- **Multiple Access**: Agents can access multiple MCP servers as needed

## Code Patterns

### Configuration-Driven Agent Creation
```python
# Use AgentRegistry with YAML configuration
from loan_processing.agents.providers.openai.agentregistry import AgentRegistry

# Create any agent type from configuration
agent = AgentRegistry.create_agent("intake", model="gpt-4")

# Agent config loaded from agents.yaml:
# - name, persona_file, mcp_servers, capabilities, output_format
```

### Orchestrator Pattern
```python
# Minimal orchestrator - just coordination
context = {"application": application_data}
context["agent1_result"] = await agent1.run(context)
context["agent2_result"] = await agent2.run(context)
# Pass accumulated context forward
```

## Development Rules

### Must Follow
1. **Use uv for all commands** - `uv run`, `uv add`, `uv sync` (never pip/poetry)
2. **Commit often** - atomic commits, one logical change per commit
3. **AgentRegistry.create_agent()** for agent creation from YAML config
4. **Keep orchestrators thin** - no business logic, just coordination
5. **Use applicant_id** for all verifications - never SSN
6. **Test before commit** - run `uv run pytest tests/test_agent_registry.py`
7. **Update personas/config** to change behavior - not code

### Never Do
1. **Never hardcode agent instructions** in Python code
2. **Never put business logic** in orchestrators
3. **Never use SSN** or sensitive IDs in tool calls
4. **Never commit without testing** - always run full test suite
5. **Never modify orchestrator** to change agent behavior

## File Organization (Updated)
```
loan_processing/
â”œâ”€â”€ agents/
â”‚   â”œâ”€â”€ providers/
â”‚   â”‚   â””â”€â”€ openai/
â”‚   â”‚       â”œâ”€â”€ agentregistry.py      # Agent creation from config
â”‚   â”‚       â””â”€â”€ orchestration/        # Orchestration patterns
â”‚   â””â”€â”€ shared/
â”‚       â”œâ”€â”€ config/
â”‚       â”‚   â””â”€â”€ agents.yaml           # Agent configurations
â”‚       â”œâ”€â”€ models/                   # Data models
â”‚       â”œâ”€â”€ utils/                    # Shared utilities
â”‚       â””â”€â”€ agent-persona/            # Agent instruction markdown files
â”œâ”€â”€ tools/
â”‚   â”œâ”€â”€ mcp_servers/                  # MCP server implementations
â”‚   â””â”€â”€ services/                     # Business services
```

## Testing Requirements
- **Coverage**: Maintain >90% test coverage
- **Test Types**: Agent registry, utilities, integration (in progress)
- **Pre-commit**: Run `uv run pytest tests/test_agent_registry.py -v`
- **Package Manager**: ALWAYS use `uv` - never pip, poetry, conda
- **MCP Mocking**: Mock MCP servers for unit tests

## Common Tasks

### Add New Agent
1. Create persona markdown in `loan_processing/agents/shared/agent-persona/`
2. Add configuration in `agents/shared/config/agents.yaml`
3. Configure name, persona_file, mcp_servers, capabilities, output_format
4. Use `AgentRegistry.create_agent(type)` to create instances
5. Write comprehensive tests in `tests/test_agent_registry.py`

### Modify Agent Behavior
1. Edit persona markdown file only
2. Do NOT modify orchestrator code
3. Test with demo script
4. Verify expected behavior changes

### Debug Agent Decisions
1. Check persona instructions first
2. Verify MCP server availability
3. Review agent's tool selection logic
4. Check context passed between agents

## Security & Privacy
- **PII Protection**: Encrypt sensitive data
- **Audit Logging**: Log all agent decisions
- **Access Control**: Limit MCP server access
- **Parameter Security**: Use internal IDs only

## Performance Guidelines
- **Model Selection**: gpt-3.5-turbo for speed, gpt-4 for accuracy
- **Timeout Handling**: Implement for long operations
- **Context Size**: Minimize between agents
- **Parallel Processing**: Where assessments are independent

## Quick Commands (Use uv ONLY)
```bash
# Package management
uv sync                        # Install dependencies
uv add package_name           # Add dependency
uv add --dev package_name     # Add dev dependency

# Start MCP servers
uv run python -m loan_processing.tools.mcp_servers.application_verification.server
uv run python -m loan_processing.tools.mcp_servers.document_processing.server
uv run python -m loan_processing.tools.mcp_servers.financial_calculations.server

# Run demo
uv run python demo_sequential_processing.py

# Run tests
uv run pytest tests/test_agent_registry.py -v
uv run pytest tests/test_agent_registry.py --cov=loan_processing
uv run python validate_tests.py  # Quick validation

# Test validation scripts
uv run python run_tests.py --type unit
```

## Remember
- **ALWAYS use uv** for package management and test execution
- **YAML configuration** defines agent behavior via `agents.yaml`
- Personas define detailed instructions, config defines structure
- Orchestrators coordinate, not decide
- Agents are autonomous tool selectors
- Security first: applicant_id, not SSN
- Test with `uv run pytest` before committing