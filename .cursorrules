# Cursor Rules - Loan Processing Multi-Agent System

## Pre-Commit Requirements (CRITICAL)
- **MANDATORY**: Run `python run_tests.py --type all` before any git commit
- **MUST PASS**: All 83+ tests must pass with >90% coverage
- **NO EXCEPTIONS**: Never commit code that breaks existing tests
- **ZERO TOLERANCE**: Commits that reduce test coverage below 90% are forbidden
- **CI/CD ENFORCEMENT**: GitHub Actions will block PRs that fail tests

## Automated Quality Gates
- **ðŸ§ª Test Suite**: Runs on every push and PR
- **ðŸ”’ Branch Protection**: Main branch requires passing status checks
- **ðŸ“Š Coverage Enforcement**: <90% coverage fails the build
- **ðŸŽ¯ Architecture Validation**: Domain boundary checks

## Test-Driven Development
- Every new feature requires comprehensive tests
- Tests must cover success paths, error cases, and edge conditions
- Async/await patterns must be properly tested
- Mock implementations should use realistic data

## Code Quality Standards
- Python 3.10+ modern type hints: `X | None`, `list[str]`, `dict[str, Any]`
- All functions/methods must be fully type-annotated
- Use async/await for all I/O operations
- Pydantic v2 for all data models
- UV package manager only (never pip directly)

## Architecture Boundaries
- Domain models/services: NO SDK imports allowed
- Provider-specific code: Isolated to `providers/` or `agents/` directories
- Business logic: Must remain provider-agnostic
- Error handling: Custom exceptions with proper inheritance

## Development Workflow
- Create GitHub issue before significant changes
- One cohesive concern per commit/PR
- Update documentation immediately with code changes
- ADRs required for architectural decisions

## File Organization
```
loan_processing/
â”œâ”€â”€ models/          # Pydantic data models (no SDK imports)
â”œâ”€â”€ services/        # Business service abstractions (no SDK imports)
â”œâ”€â”€ providers/       # AI provider adapters
â”œâ”€â”€ tools/           # MCP / tool integration layer
â”œâ”€â”€ agents/          # Concrete agent implementations
â””â”€â”€ orchestration/   # Workflow coordination
```

## Pre-Commit Checklist (MANDATORY)
1. âœ… Run `python run_tests.py --type all`
2. âœ… Verify all tests pass (83+ tests)
3. âœ… Confirm coverage â‰¥90%
4. âœ… Check type hints with `mypy`
5. âœ… Lint with `ruff check`
6. âœ… Update relevant documentation
7. âœ… Verify no SDK leakage in domain layers
8. âœ… GitHub Actions will validate automatically on PR

## Commands to Run Before Commit
```bash
# REQUIRED: Full test suite
python run_tests.py --type all

# OPTIONAL: Quick type and lint checks
mypy loan_processing/ mcp_servers/
ruff check .
```

## Failure Scenarios - DO NOT COMMIT IF:
- Any test fails
- Coverage drops below 90%
- Type checking fails
- Lint errors exist
- Domain models import SDK types
- Missing documentation for new features

## Success Criteria
- All tests green âœ…
- Coverage >90% âœ…
- Clean type checking âœ…
- No lint errors âœ…
- Documentation updated âœ…
- Architecture boundaries respected âœ…

Remember: **Quality over speed**. A working, well-tested system is better than rushed, broken code.
